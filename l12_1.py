# -*- coding: utf-8 -*-
"""L12.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qX6El-vImACLugUxFQguzr_yIMgt-ULM
"""

import pandas as pd

data = pd.read_csv("iris.data", names = ['a','b','c','d', 'label'])
data

import torch
data_x = torch.from_numpy(data.iloc[:, :4].values)
data_y = data.iloc[:,4]

import matplotlib.pyplot as plt

X = data_x - data_x.mean(dim=0)
plt.scatter(X[:,0], X[:,1])
plt.show()

def findPC(X):
  w = torch.randn(X.shape[1])
  w_size = (w * w).sum() ** 0.5
  w /= w_size

  lr = 0.1

  for epoch in range(100):
    w.requires_grad_(True)
    variance = -((X * w).sum(dim=1)**2).mean()

    variance.backward()

    with torch.no_grad():
      w = w - lr * w.grad
      w /= (w * w).sum() ** 0.5

  w.requires_grad_(False) 
  return w, -variance.item()

w , v = findPC(X)
print(w,v)

pcs = []
var = []
def PCA(k,X):
  Z = X - X.mean(dim=0)

  for i in range(k):
    w,v = findPC(Z)
    pcs.append(w)
    var.append(v)

    # Z = Z - w*Z dot b
    Z = Z - w * (Z * w).sum(dim=1).unsqueeze(1)
  return pcs, var

res = PCA(4,X)
print(res)

plt.plot(var,"o-")
plt.show()

X  = torch.tensor(X, dtype=torch.float)
XX = X @ torch.stack(pcs[:2]).T

species = {"Iris-setosa":0, "Iris-virginica":1, "Iris-versicolor":2}
plt.scatter(XX[:,0], XX[:,1], c = [species[d] for d in data_y], alpha = 0.5)
plt.show()