# -*- coding: utf-8 -*-
"""L01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MaavcQPPVni1IbQBUQ8zF3lK6EmhxfYD
"""

#line chart
import matplotlib.pyplot as plt

years = [1950,1960,1970,1980,1990,2000,2010]
gdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]

# marker
# line style = dashed (--), solid(-), dotted(:) 
plt.plot(years, gdp, color='green', marker='o', linestyle='solid')

plt.title("Nominal GDP")
plt.ylabel("Billions of $")
plt.xlabel("Years")

plt.show()

# line chart
import matplotlib.pyplot as plt

variance = [1,2,4,8,16,32,64,128,256]
bias_squared = [256,128,64,32,16,8,4,2,1]
total_error = [x+y for x,y in zip(variance, bias_squared)]
xs = range(len(variance))

plt.plot(xs, variance, 'g-', label='variance')
plt.plot(xs, bias_squared, 'r-.', label='bias^2')
plt.plot(xs, total_error, 'b:', label='total error')

plt.legend(loc="upper center")
plt.xlabel("model complexity")
plt.xticks([])
plt.title("The Bias-Variance Trandoff")
plt.show()

# bar chart
import matplotlib.pyplot as plt

movies = ["Annie Hall", "Ben-Hur", "Casablanca", "Gandhi", "West Side Story"]
num_oscars = [5,11,3,8,10]

plt.bar(movies, num_oscars)

plt.title("My Favorite Movies")
plt.ylabel("# of Academy Awards")
plt.show()

# histogram
import matplotlib.pyplot as plt
from collections import Counter

grades = [83,95,91,87,70,0,85,82,100,67,73,77,0]
histogram = Counter(min(90, grade // 10*10) for grade in grades)
plt.bar([ x + 5 for x in histogram.keys()], histogram.values(), width = 10, edgecolor = "black")
plt.xticks(range(0,101,10))
plt.xlabel("Decile")
plt.ylabel("# of Students")
plt.title("Distribution of Exam 1 Grades")
plt.show()

# histogram
import matplotlib.pyplot as plt

grades = [83,95,91,87,70,0,85,82,100,67,73,77,0]

x = [0,10,20,30,40,50,60,70,80,90]
x = [i+5 for i in x]
y = [0]*10
for g in grades:
	y[min(9,g//10)] +=1

plt.xlabel("Decile")
plt.ylabel("# of Students")
plt.title("Distribution of Exam 1 Grades")
plt.bar(x,y,width=10, edgecolor="black")
plt.xticks([0,10,20,30,40,50,60,70,80,90,100])
plt.show()

# scatterplot
import matplotlib.pyplot as plt

friends = [70,65,72,63,71,64,60,64,67]
minutes = [175,170,205,120,220,130,105,145,190]
labels = ['a','b','c','d','e','f','g','h','i']

plt.scatter(friends, minutes)

for l, f, m in zip(labels, friends, minutes):
	plt.annotate(l, xy=(f,m), xytext=(5,-5), textcoords="offset points")

plt.title("Daily Minutes vs. Number of Friends")
plt.xlabel("# of Friends")
plt.ylabel("daily minutes spent of the site")
plt.show()

# network visualization
import matplotlib.pyplot as plt
import networkx as nx

G = nx.Graph()

G.add_edge('A','B',color='r',weight=1)
G.add_edge('A','C',color='g',weight=2)
G.add_edge('B','C',color='b',weight=3)
G.add_edge('A','E',color='g',weight=4)
G.add_edge('B','E',color='g',weight=1)
G.add_edge('C','E',color='g',weight=2)
G.add_edge('C','D',color='g',weight=3)
G.add_edge('D','F',color='g',weight=4)
G.add_edge('D','G',color='g',weight=5)
G.add_edge('G','F',color='g',weight=6)

pos = nx.spring_layout(G)

colors = list(nx.get_edge_attributes(G, 'color').values())
weights = list(nx.get_edge_attributes(G, 'weight').values())

nx.draw(G, pos, edge_color=colors, width=weights, with_labels=True)
plt.show()