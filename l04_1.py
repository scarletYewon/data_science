# -*- coding: utf-8 -*-
"""L04.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JsctoVUB0xA3Yc0hddRF_uDwC1xTtpmj
"""

# 텐서 만들기
import torch
x = torch.tensor([[1,2,3],[4,5,6],[7,8,9]], dtype=torch.float)

# 텐서의 모양 알아보기
print(x.shape)
print(x.size())

# rank 알아보기
print(len(x.shape))
print(x.ndimension())
print(x.ndim)

print(x)
print(x.shape)
x0 = torch.unsqueeze(x,0)
x1 = torch.unsqueeze(x,1)
x2 = torch.unsqueeze(x,2)

print(x0)
print(x0.shape)
print(x1)
print(x1.shape)
print(x2)
print(x2.shape)

x02 = torch.unsqueeze(x0, 2)
print(x02)
print(x02.shape)
x02sqz = torch.squeeze(x0)
print(x02sqz)
print(x02sqz.shape)

xv9 = x.view(1,3,-1)
print(x)
print(xv9)
print(xv9.shape)

x = torch.tensor([[1,2],[3,4],[5,6]], dtype=torch.float)
w = torch.randn(1,2)
b = torch.randn(3,1)
print(x)
print(w)
print(b)

xwpb = torch.mm(x, w.T) + b
print(xwpb)

print(x)
print(w)
print(torch.mm(x, w.T))
print((x * w).sum(axis=1).view(3,1))

w = torch.tensor(1.0, requires_grad=True)
a = w*3
l = a**2
l.backward()
print(w.grad)

x = torch.tensor([[1,2],[3,2],[3,7],[1,1],[1,0]], dtype = torch.float)
y = torch.tensor([[4],[8],[23],[1],[-2]], dtype = torch.float)

W = torch.zeros(2,1)
b = torch.zeros(1)

# 가설 (hypothesis)

lr = 0.01

for epoch in range(1000):
  W.requires_grad_(True)
  b.requires_grad_(True)

  h = torch.mm(x, W) + b
  cost = torch.mean((h - y) ** 2) # mse

  cost.backward()
  with torch.no_grad():
    W  = W - lr * W.grad
    b = b - lr * b.grad

    if epoch % 100 == 0:
      print(f"W: {W}, b: {b}, cost: {cost}")

x_test = torch.tensor([[5,10]], dtype=torch.float)
test_result = torch.mm(x_test, W) + b
print(test_result)

from sklearn.linear_model import LinearRegression

x = [[1,2],[3,2],[3,7],[1,1],[1,0]]
y = [[4],[8],[23],[1],[-2]]

model = LinearRegression()
model.fit(x,y)

print(model.coef_, model.intercept_)

res = model.predict([[5,10]])
print(res)